/*

[Item-parser Syntax Information]

1. [Keyword] separates into two groups
   - [Property Keywords] : [Type], [Name], [Class], [Quality], [Flag], [Level], [Prefix], [Suffix]
   - [Stat Keywords] : [Number or Alias]

2. [Keyword] must be surrounded by '[' and ']'

3. [Property Keywords] must be placed first

4. Insert '#' symbol between [Property Keywords] and [Stat Keywords]

5. Use '+', '-', '*', '/', '(', ')', '&&', '||', '>', '>=', '<', '<=', '==', '!=' symbols for comparison

6. Use '//' symbol for comment

*/

include("NTItemAlias.dbl");

var NTIP = {},
	NTIP_CheckList = [],NTIP_CheckListNoTier = [],
	stringArray = [],
	NTIP_QuestItems = [87,88,89,90,91,92,173,174,521,524,525,545,546,547,548,549,552,553,554,555];

NTIP.PushLine = function(index, line, filename) {
	var info, parsedLine, newLine;
	
	info = {
			line: index,
			file: filename,
			string: line
		};
	
	newLine = NTIP.ParseLineInt(line, info);
	
	if (newLine) {
		NTIP_CheckList.push(newLine);
		if (!line.toLowerCase().match("tier")) {
			NTIP_CheckListNoTier.push(newLine);
		} else {
			NTIP_CheckListNoTier.push([false, false]);
		}
		stringArray.push(info);
	}
};

NTIP.OpenFile = function (filepath, notify) {
	if (!FileTools.exists(filepath)) {
		if (notify) {
			Misc.errorReport("ÿc1NIP file doesn't exist: ÿc0" + filepath);
		}

		return false;
	}

	var i, nipfile, line, lines, info, item,
		tick = getTickCount(),
		filename = filepath.substring(filepath.lastIndexOf("/") + 1, filepath.length),
		entries = 0, entriesNO = 0;

	try {
		nipfile = File.open(filepath, 0);
	} catch (fileError) {
		if (notify) {
			Misc.errorReport("ÿc1Failed to load NIP: ÿc0" + filename);
		}
	}

	if (!nipfile) {
		return false;
	}

	lines = nipfile.readAllLines();

	nipfile.close();

	for (i = 0; i < lines.length; i += 1) {
		info = {
			line: i + 1,
			file: filename,
			string: lines[i]
		};

		try {
			line = NTIP.ParseLineInt(lines[i], info);
		} catch(e) {
			throw new Error("error when parsing line " + info.line + " of pickit file " + info.file);
		}

		if (line) {
			entries += 1;

			NTIP_CheckList.push(line);
			if (!lines[i].toLowerCase().match("tier")) {
				entriesNO += 1;
				NTIP_CheckListNoTier.push(line);
			} else {
				NTIP_CheckListNoTier.push([false, false]);
			}
			stringArray.push(info);
		}
	}

	if (notify) {
		print("ÿc4Loaded NIP: ÿc2" + filename + "ÿc4. Lines: ÿc2" + lines.length + "ÿc4. Valid entries: ÿc2" + entries + ". ÿc4Time: ÿc2" + (getTickCount() - tick) + " ms");
	}

	return true;
};

/*NTIP.Minify = function (filepath) {
	var i, nipfile, lines, hash, fileList,
		filename = filepath.substring(filepath.lastIndexOf("/") + 1, filepath.length);

	try {
		nipfile = File.open(filepath, 0);
	} catch (fileError) {

	}

	if (!nipfile) {
		return false;
	}

	hash = md5_file(filepath);
	lines = nipfile.readAllLines();

	nipfile.close();

	for (i = 0; i < lines.length; i += 1) {
		lines[i] = lines[i].replace(/\s+/g, "").toLowerCase();
	}

	Misc.fileAction("pickit/minified/" + hash + "." + filename, 1, lines.join("\n"));

	fileList = dopen("pickit/minified/").getFiles();

	for (i = 0; i < fileList.length; i += 1) {
		if (fileList[i].indexOf(filename) > -1 && fileList[i].indexOf(hash) === -1) {
			FileTools.remove("pickit/minified/" + fileList[i]);
		}
	}

	return true;
};*/

NTIP.CheckQuantityOwned = function (item_type, item_stats) {
	var i, item,
		num = 0,
		items = me.getItems();

	if (!items) {
		print("I can't find my items!");

		return 0;
	}

	for (i = 0; i < items.length; i += 1) {
		if (items[i].mode === 0 && items[i].location === 7) {
			item = items[i];

			if ((item_type !== null && item_type.length > 0 && eval(item_type)) || item_type === null) {
				if ((item_stats !== null && item_stats.length > 0 && eval(item_stats)) || item_stats === null) {
					num += 1;
				}
			}
		} else if (items[i].mode === 0 && items[i].location === 3) { // inv check
			item = items[i];

			if ((item_type !== null && item_type.length > 0 && eval(item_type)) || item_type === null) {
				if ((item_stats !== null && item_stats.length > 0 && eval(item_stats)) || item_stats === null) {
					//if (Config.Inventory[items[i].y][items[i].x] > 0) { // we check only space that is supposed to be free
						num += 1;
					//}
				}
			}
		}
	}

	//print("I have "+num+" of these.");

	return num;
};

NTIP.Clear = function () {
	NTIP_CheckList = [];
	stringArray = [];
};

NTIP.GetTierEx = function (item, tierProperty, checkList, duraCheck) {
	var i,
		tier = -1,
		tempTier = -1,
		isFormula = false;
		
	if (duraCheck === undefined) {
		duraCheck = true;
	}

	if (NTIP_QuestItems.indexOf(item.classid) > -1) return 0;
	
	// Go through ALL lines that describe the item
	for (i = 0; i < checkList.length; i += 1) {
		if (checkList[i].length === 3 && checkList[i][2].hasOwnProperty(tierProperty) && checkList[i][2][tierProperty]) {
			isFormula = isNaN(checkList[i][2][tierProperty]);
			tempTier = isFormula ? eval(checkList[i][2][tierProperty]) : parseInt(checkList[i][2][tierProperty]);
			if (!isNaN(tempTier) && tempTier > tier)
			{
				try {
					if (checkList[i][0].length > 0) {
						if (eval(checkList[i][0])) {
							if (checkList[i][1].length > 0) {
								if (eval(checkList[i][1])) {
									tier = tempTier;
								}
							} else {
								tier = tempTier;
							}
						}
					} else if (checkList[i][1].length > 0) {
						if (eval(checkList[i][1])) {
							tier = tempTier;
						}
					}
				} catch (e) {

				}
			}
		}
	}
	
	if (duraCheck) {
		var durability = item.getStat(72);
		
		if (typeof durability === "number" && durability /* * 100 / item.getStat(73) */<= 0) {
			tier = -1;
		}
	}
	
	if (tier < -1) {
		tier = 0;
	}

	if (isFormula)
	{
		return tier+1;
	}
	
	return tier;
};

NTIP.GetTier = function (item) {
	var i,
		tier = -1,
		tempTier = -1,
		isFormula = false;

	if (NTIP_QuestItems.indexOf(item.classid) > -1) return 0;
	
	// Go through ALL lines that describe the item
	for (i = 0; i < NTIP_CheckList.length; i += 1) {
		if (NTIP_CheckList[i].length === 3 && NTIP_CheckList[i][2].hasOwnProperty("Tier") && NTIP_CheckList[i][2].Tier) {
			isFormula = isNaN(NTIP_CheckList[i][2].Tier);
			tempTier = isFormula ? eval(NTIP_CheckList[i][2].Tier) : parseInt(NTIP_CheckList[i][2].Tier);
			if (!isNaN(tempTier) && tempTier > tier)
			{
				try {
					if (NTIP_CheckList[i][0].length > 0) {
						if (eval(NTIP_CheckList[i][0])) {
							if (NTIP_CheckList[i][1].length > 0) {
								if (eval(NTIP_CheckList[i][1])) {
									tier = tempTier;
								}
							} else {
								tier = tempTier;
							}
						}
					} else if (NTIP_CheckList[i][1].length > 0) {
						if (eval(NTIP_CheckList[i][1])) {
							tier = tempTier;
						}
					}
				} catch (e) {

				}
			}
		}
	}
	
	var durability = item.getStat(72);
	
	if (typeof durability === "number" && durability * 100 / item.getStat(73) <= 0) {
		tier = -1;
	}
	
	if (tier < -1) {
		tier = 0;
	}

	if (isFormula)
	{
		return tier+1;
	}
	
	return tier;
};


NTIP.GetMercTier = function (item) {
	var i,
		tier = -1,
		tempTier = -1,
		isFormula = false;

	// Go through ALL lines that describe the item
	for (i = 0; i < NTIP_CheckList.length; i += 1) {
		if (NTIP_CheckList[i].length === 3 && NTIP_CheckList[i][2].hasOwnProperty("MercTier") && NTIP_CheckList[i][2].MercTier) {
			isFormula = isNaN(NTIP_CheckList[i][2].MercTier);
			tempTier = isFormula ? eval(NTIP_CheckList[i][2].MercTier) : parseInt(NTIP_CheckList[i][2].MercTier);
			if (!isNaN(tempTier) && tempTier > tier)
			{
				try {
					if (NTIP_CheckList[i][0].length > 0) {
						if (eval(NTIP_CheckList[i][0])) {
							if (NTIP_CheckList[i][1].length > 0) {
								if (eval(NTIP_CheckList[i][1])) {
									if (eval(NTIP_CheckList[i][2].MercTier) > tier) {
										tier = tempTier;
									}
								}
							} else {
								if (eval(NTIP_CheckList[i][2].MercTier) > tier) {
									tier = tempTier;
								}
							}
						}
					} else if (NTIP_CheckList[i][1].length > 0) {
						if (eval(NTIP_CheckList[i][1])) {
							if (eval(NTIP_CheckList[i][2].MercTier) > tier) {
								tier = tempTier;
							}
						}
					}
				} catch (e) {

				}
			}
		}
	}
	
	var durability = item.getStat(72);
	
	if (typeof durability === "number" && durability * 100 / item.getStat(73) <= 0) {
		tier = -1;
	}
	
	if (tier < -1) {
		tier = 0;
	}
	
	if (isFormula)
	{
		return tier+1;
	}
	
	return tier;
};

NTIP.CheckItem = function (item, entryList, verbose) {
	var i, list, identified, num,
		rval = {},
		result = 0;

	if (!entryList) {
		list = NTIP_CheckList;
	} else {
		list = entryList;
	}

	identified = item.getFlag(0x10);

	for (i = 0; i < list.length; i += 1) {
		try {
			if (list[i][0].length > 0) {
				if (eval(list[i][0])) {
					if (list[i][1].length > 0) {
						if (eval(list[i][1])) {
							if (list[i][2] && list[i][2].MaxQuantity && !isNaN(list[i][2].MaxQuantity)) {
								num = NTIP.CheckQuantityOwned(list[i][0], list[i][1]);

								if (num < list[i][2].MaxQuantity) {
									result = 1;

									break;
								} else {
									if (item.getParent() && item.getParent().name === me.name && item.mode === 0 && num === list[i][2].MaxQuantity) { // attempt at inv fix for maxquantity
										result = 1;

										break;
									}
								}
							} else {
								result = 1;

								break;
							}
						} else if (!identified && result === 0) {
							result = -1;

							if (verbose) {
								rval.line = stringArray[i].file + " #" + stringArray[i].line;
							}
						}
					} else {
						if (list[i][2] && list[i][2].MaxQuantity && !isNaN(list[i][2].MaxQuantity)) {
							num = NTIP.CheckQuantityOwned(list[i][0], null);

							if (num < list[i][2].MaxQuantity) {
								result = 1;

								break;
							} else {
								if (item.getParent() && item.getParent().name === me.name && item.mode === 0 && num === list[i][2].MaxQuantity) { // attempt at inv fix for maxquantity
									result = 1;

									break;
								}
							}
						} else {
							result = 1;

							break;
						}
					}
				}
			} else if (list[i][1].length > 0) {
				if (eval(list[i][1])) {
					if (list[i][2] && list[i][2].MaxQuantity && !isNaN(list[i][2].MaxQuantity)) {
						num = NTIP.CheckQuantityOwned(null, list[i][1]);

						if (num < list[i][2].MaxQuantity) {
							result = 1;

							break;
						} else {
							if (item.getParent() && item.getParent().name === me.name && item.mode === 0 && num === list[i][2].MaxQuantity) { // attempt at inv fix for maxquantity
								result = 1;

								break;
							}
						}
					} else {
						result = 1;

						break;
					}
				} else if (!identified && result === 0) {
					result = -1;

					if (verbose) {
						rval.line = stringArray[i].file + " #" + stringArray[i].line;
					}
				}
			}
		} catch (pickError) {
			showConsole();

			if (!entryList) {
				Misc.errorReport("ÿc1Pickit error! Line # ÿc2" + stringArray[i].line + " ÿc1Entry: ÿc0" + stringArray[i].string + " (" + stringArray[i].file + ") Error message: " + pickError.message + " Trigger item: " + item.fname.split("\n").reverse().join(" "));

				NTIP_CheckList[i] = ["", "", ""]; // make the bad entry blank
			} else {
				Misc.errorReport("ÿc1Pickit error in runeword config!");
			}

			result = 0;
		}
	}

	if (verbose) {
		switch (result) {
		case -1:
			break;
		case 1:
			rval.line = stringArray[i].file + " #" + stringArray[i].line;

			break;
		default:
			rval.line = null;

			break;
		}

		rval.result = result;

		return rval;
	}

	return result;
};

NTIP.IsSyntaxInt = function (ch) {
	return (ch === '!' || ch === '%' || ch === '&' || (ch >= '(' && ch <= '+') || ch === '-' || ch === '/' || (ch >= ':' && ch <= '?') || ch === '|');
};

NTIP.ParseLineInt = function (input, info) {
	var i, property, p_start, p_end, p_section, p_keyword, p_result, value;

	p_end = input.indexOf("//");

	if (p_end !== -1) {
		input = input.substring(0, p_end);
	}

	input = input.replace(/\s+/g, "").toLowerCase();

	if (input.length < 5) {
		return null;
	}

	p_result = input.split("#");

	if (p_result[0] && p_result[0].length > 4) {
		p_section = p_result[0].split("[");

		p_result[0] = p_section[0];

		for (i = 1; i < p_section.length; i += 1) {
			p_end = p_section[i].indexOf("]") + 1;
			property = p_section[i].substring(0, p_end - 1);

			switch (property) {
			case 'color':
				p_result[0] += "item.getColor()";

				break;
			case 'type':
				p_result[0] += "item.itemType";

				break;
			case 'name':
				p_result[0] += "item.classid";

				break;
			case 'class':
				p_result[0] += "item.itemclass";

				break;
			case 'quality':
				p_result[0] += "item.quality";

				break;
			case 'flag':
				if (p_section[i][p_end] === '!') {
					p_result[0] += "!item.getFlag(";
				} else {
					p_result[0] += "item.getFlag(";
				}

				p_end += 2;

				break;
			case 'level':
				p_result[0] += "item.ilvl";

				break;
			case 'prefix':
				if (p_section[i][p_end] === '!') {
					p_result[0] += "!item.getPrefix(";
				} else {
					p_result[0] += "item.getPrefix(";
				}

				p_end += 2;

				break;
			case 'suffix':
				if (p_section[i][p_end] === '!') {
					p_result[0] += "!item.getSuffix(";
				} else {
					p_result[0] += "item.getSuffix(";
				}

				p_end += 2;

				break;
			default:
				Misc.errorReport("Unknown property: " + property + " File: " + info.file + " Line: " + info.line);

				return false;
			}

			for (p_start = p_end; p_end < p_section[i].length; p_end += 1) {
				if (!NTIP.IsSyntaxInt(p_section[i][p_end])) {
					break;
				}
			}

			p_result[0] += p_section[i].substring(p_start, p_end);

			if (p_section[i].substring(p_start, p_end) === "=") {
				Misc.errorReport("Unexpected = at line " + info.line + " in " + info.file);

				return false;
			}

			for (p_start = p_end; p_end < p_section[i].length; p_end += 1) {
				if (NTIP.IsSyntaxInt(p_section[i][p_end])) {
					break;
				}
			}

			p_keyword = p_section[i].substring(p_start, p_end);

			if (isNaN(p_keyword)) {
				switch (property) {
				case 'color':
					if (NTIPAliasColor[p_keyword] === undefined) {
						Misc.errorReport("Unknown color: " + p_keyword + " File: " + info.file + " Line: " + info.line);

						return false;
					}

					p_result[0] += NTIPAliasColor[p_keyword];

					break;
				case 'type':
					if (NTIPAliasType[p_keyword] === undefined) {
						Misc.errorReport("Unknown type: " + p_keyword + " File: " + info.file + " Line: " + info.line);

						return false;
					}

					p_result[0] += NTIPAliasType[p_keyword];

					break;
				case 'name':
					if (NTIPAliasClassID[p_keyword] === undefined) {
						Misc.errorReport("Unknown name: " + p_keyword + " File: " + info.file + " Line: " + info.line);

						return false;
					}

					p_result[0] += NTIPAliasClassID[p_keyword];

					break;
				case 'class':
					if (NTIPAliasClass[p_keyword] === undefined) {
						Misc.errorReport("Unknown class: " + p_keyword + " File: " + info.file + " Line: " + info.line);

						return false;
					}

					p_result[0] += NTIPAliasClass[p_keyword];

					break;
				case 'quality':
					if (NTIPAliasQuality[p_keyword] === undefined) {
						Misc.errorReport("Unknown quality: " + p_keyword + " File: " + info.file + " Line: " + info.line);

						return false;
					}

					p_result[0] += NTIPAliasQuality[p_keyword];

					break;
				case 'flag':
					if (NTIPAliasFlag[p_keyword] === undefined) {
						Misc.errorReport("Unknown flag: " + p_keyword + " File: " + info.file + " Line: " + info.line);

						return false;
					}

					p_result[0] += NTIPAliasFlag[p_keyword] + ")";

					break;
				case 'prefix':
				case 'suffix':
					p_result[0] += "\"" + p_keyword + "\")";

					break;
				}
			} else {
				if (property === 'flag' || property === 'prefix' || property === 'suffix') {
					p_result[0] += p_keyword + ")";
				} else {
					p_result[0] += p_keyword;
				}
			}

			p_result[0] += p_section[i].substring(p_end);
		}
	} else {
		p_result[0] = "";
	}

	if (p_result[1] && p_result[1].length > 4) {
		p_section = p_result[1].split("[");
		p_result[1] = p_section[0];

		for (i = 1; i < p_section.length; i += 1) {
			p_end = p_section[i].indexOf("]");
			p_keyword = p_section[i].substring(0, p_end);

			if (isNaN(p_keyword)) {
				if (NTIPAliasStat[p_keyword] === undefined) {
					Misc.errorReport("Unknown stat: " + p_keyword + " File: " + info.file + " Line: " + info.line);

					return false;
				}

				p_result[1] += "item.getStatEx(" + NTIPAliasStat[p_keyword] + ")";
			} else {
				p_result[1] += "item.getStatEx(" + p_keyword + ")";
			}

			p_result[1] += p_section[i].substring(p_end + 1);
		}
	} else {
		p_result[1] = "";
	}

	if (p_result[2] && p_result[2].length > 0) {
		p_section = p_result[2].split("[");
		p_result[2] = {};

		for (i = 1; i < p_section.length; i += 1) {
			p_end = p_section[i].indexOf("]");
			p_keyword = p_section[i].substring(0, p_end);

			switch (p_keyword.toLowerCase()) {
			case "maxquantity":
				value = Number(p_section[i].split("==")[1].match(/\d+/g));

				if (!isNaN(value)) {
					p_result[2].MaxQuantity = value;
				}

				break;
			case "tier":
				//value = Number(p_section[i].split("==")[1].match(/\d+/g));
				value = p_section[i].split("==")[1];

				if (!isNaN(value)) {
					p_result[2].Tier = value;
				}
				else
				{
					p_result[2].Tier = value.replace(/getstatex/g, "getStatEx");
				}

				break;
			
			case "merctier":
				value = p_section[i].split("==")[1];
				if (!isNaN(value)) {
					p_result[2].MercTier = value;
				}
				else
				{
					p_result[2].MercTier = value.replace(/getstatex/g, "getStatEx");
				}
				
				break;
			default:
				Misc.errorReport("Unknown 3rd part keyword: " + p_keyword.toLowerCase());

				return false;
			}
		}
	}

	return p_result;
};
