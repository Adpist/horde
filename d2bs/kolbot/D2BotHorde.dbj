var StarterConfig = {
	JoinChannel: "", // Name of the channel to join
	AnnounceGames: false, // Default value
	AfterGameMessage: "", // Default message after a finished game. Can be an array of messages
	ResetCount: 999, // Reset game count back to 1 every X games.
	CharacterDifference: 99, // Character level difference. Set to false to disable character difference.

	FirstJoinMessage: "", // Message to say when first joining a channel, usually ".login"
	ChatActionsDelay: 2, // Seconds to wait in lobby before entering a channel

	CreateGameDelay: 10, // Seconds to wait before creating a new game
	JoinRetryDelay: 5, // Time in seconds to wait before next join attempt
	SwitchKeyDelay: 5, // Seconds to wait before switching a used/banned key or after realm down

	CrashDelay: rand(120, 150), // Seconds to wait after a d2 window crash
	FTJDelay: rand(600,900), // Seconds to wait after failing to create a game
	RealmDownDelay: 3, // Minutes to wait after getting Realm Down message
	UnableToConnectDelay: 5, // Minutes to wait after Unable To Connect message
	TCPIPNoHostDelay: 5, // Seconds to wait after Cannot Connect To Server message
	CDKeyInUseDelay: 5, // Minutes to wait before connecting again if CD-Key is in use. SwitchKeys overrides this!
	ConnectingTimeout: 20, // Seconds to wait before cancelling the 'Connecting...' screen
	PleaseWaitTimeout: 30, // Seconds to wait before cancelling the 'Please Wait...' screen
	WaitInLineTimeout: 3600, // Seconds to wait before cancelling the 'Waiting in Line...' screen
	GameDoesNotExistTimeout: 30, // Seconds to wait before cancelling the 'Game does not exist.' screen

	LeaderElectAnyQuest: false, // Will leader priority on any quest not just the ones for act progression, ALL profiles MUST use this profile
};

var JoinSettings = {
	// Settings here ARE NOT HONORED will be override by the leader election
};

// Advanced config - you don't have to edit this unless you need some of the features provided
var AdvancedConfig = {
	/* Features: Override join delay for each profile

	* Format *:
		"Profile Name": {JoinDelay: number_of_seconds}

	* Example * (don't edit this - it's just an example):
		"MyProfile1": {JoinDelay: 3},
		"MyProfile2": {JoinDelay: 6}
	*/

	// Put your lines under this one. Multiple entries are separated by commas. No comma after the last one.

};

var ChannelConfig = {
};


// No touchy!
include("json2.js");
include("OOG.js");
include("automule.js");
include("gambling.js");
include("craftingsystem.js");
include("torchsystem.js");
include("common/misc.js");
include("common/pather.js");
include("common/util.js");
include("common/config.js");
include("common/Prototypes.js");
include("horde/includes.js");

var i, j, gameInfo, joinInfo, gameStart, ingame, gold, handle,useChat = false,
	firstLogin, chatActionsDone, lastGameTick, connectFail, pingQuit, minGameTime,
	gameCount = DataFile.getStats().runs + 1,
	sequence, timeline,
	loginRetry = 0,
	queuecount = 0,queuestarttime,
	lastGameStatus = "ready",
	isUp = "no",
	leader = "",
	lastGame = [],
	chanInfo = {
		joinChannel: "",
		firstMsg: "",
		afterMsg: "",
		announce: false
	};

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

function sayMsg(string) {
	if (!useChat) {
		return;
	}

	say(string);
}

function randomString(len, useNumbers = false) {
	var i, rval = "",
		letters = useNumbers ? "abcdefghijklmnopqrstuvwxyz0123456789" : "abcdefghijklmnopqrstuvwxyz";

	len = len ? len : rand(5, 14);

	for (i = 0; i < len; i += 1) {
		rval += letters[rand(0, letters.length - 1)];
	}

	return rval;
}

function locationTimeout (time, location) {
	var endtime = getTickCount() + time, status;

	while (!me.ingame && getLocation() === location && endtime > getTickCount()) {
		switch (location) {
			case 2: // Waiting In Line
				status = "Waiting In Line...";
				let linePosition = ControlAction.getText(4, 427, 234, 300, 100);
				if (linePosition) {
					linePosition = linePosition.join(" ");
					if (linePosition.indexOf(getLocaleString(11026) > -1)) { // Your position in line is:
						status = "Waiting In Line (" + parseInt(linePosition.replace(/[^0-9]/g, "")) + ") ...";
					}
				}
				
				D2Bot.updateStatus(status);
				break;
		}
		delay(500);
		Playtime.recordPlaytime();
	}

	return (getLocation() !== location);
}

function updateCount () {
	D2Bot.updateCount();
	delay(1000);
	ControlAction.click(6, 264, 366, 272, 35);

	try {
		login(me.profile);
	} catch (e) {

	}

	delay(1000);
	ControlAction.click(6, 33, 572, 128, 35);
}

function ScriptMsgEvent (msg) {
	if (msg.indexOf("run ") !== -1) {
		var	args = msg.split(' ');
		if (args.length >= 3) {
			sequence = args[1];
			timeline = args[2];
		} else if (args.length >= 2){
			sequence = args[1];
			timeline = undefined;
		} else {
			HordeDebug.logScriptError("Sequencer", "Invalid run command: " + msg);
		}
		return;
	}
	
	switch (msg) {
	case "HordeGameEnd":
		sequence = undefined;
		timeline = undefined;
		break;
	case "mule":
		AutoMule.check = true;

		break;
	case "muleTorch":
		AutoMule.torchCheck = true;

		break;
	case "torch":
		TorchSystem.check = true;

		break;
	case "crafting":
		CraftingSystem.check = true;

		break;
	case "getMuleMode":
		if (AutoMule.torchAnniCheck === 2) {
			scriptBroadcast("2");
		} else if (AutoMule.torchAnniCheck === 1) {
			scriptBroadcast("1");
		} else if (AutoMule.check) {
			scriptBroadcast("0");
		}

		break;
	}
}

function ReceiveCopyData (mode, data) {
	var obj;

	switch (data) {
	case "Handle":
		handle = mode;

		break;
	}
	
	if (mode == 55 )
	{
		let { msg, nick, ingame } = JSON.parse(data);
		
		if (!ingame) {
			if (msg.indexOf("ready ") !== -1) {
				Communication.Synchro.onReceiveCommand(nick, msg);
			}
		}
		return;
	}

	switch (mode) {
	case 1: // JoinInfo
		//print("Got Join Info");

		joinInfo = JSON.parse(data);

		break;
	case 2: // Game info
		print("Recieved Game Info");
		gameInfo = JSON.parse(data);

		break;
	case 3: // Game request
		// Don't let others join mule/torch/key/gold drop game
		if (AutoMule.inGame || Gambling.inGame || TorchSystem.inGame || CraftingSystem.inGame) {
			break;
		}

		if (gameInfo) {
			obj = JSON.parse(data);

			D2Bot.joinMe(obj.profile, me.gamename || "", "", me.gamepassword || "", me.gameReady ? "yes" : "no");
		}

		break;
	case 4:
		// Heartbeat ping
		if (data === "pingreq") {
			sendCopyData(null, me.windowtitle, 4, "pingrep");
		}

		break;
		
	//Leader election filtering
	case 56:
	case 57:
	case 58:
		LeaderElection.receiveCopyData(mode, data);
		break;
	}
}

function setNextGame() {
	var nextGame = gameInfo.gameName;

	if (StarterConfig.ResetCount && gameCount + 1 >= StarterConfig.ResetCount) {
		nextGame += 1;
	} else {
		nextGame += (gameCount + 1);
	}

	DataFile.updateStats("nextGame", nextGame);
}

function timer (tick) {
	return " (" + new Date(getTickCount() - tick).toISOString().slice(11, -5) + ")";
}

function main () {
	
	debugLog(me.profile);
	addEventListener('copydata', ReceiveCopyData);
	addEventListener('scriptmsg', ScriptMsgEvent);

	while (!handle) {
		delay(100);
	}
	includeHorde();
	Communication.ingame = false;
	DataFile.updateStats("handle", handle);
	D2Bot.init();
	HordeSystem.init();
	Config.init(false, true);
	minGameTime = Config.MinGameTime;
	load("tools/heartbeat.js");
	load("libs/horde/tools/overlaythread.js");
	
	while (!gameInfo) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (gameInfo.error) {
		//D2Bot.retrieve();
		delay(200);

		if (!!DataFile.getStats().debugInfo) {
			gameInfo.crashInfo = DataFile.getStats().debugInfo;

			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(gameInfo.crashInfo).currScript + " Area: " + JSON.parse(gameInfo.crashInfo).area, 10);
		}

		/*if (gameInfo.crashInfo) {
			D2Bot.printToConsole("Crash Info: Script: " + gameInfo.crashInfo.currScript + " Area: " + gameInfo.crashInfo.area + (gameInfo.crashInfo.hasOwnProperty("lastAction") ? " " + gameInfo.crashInfo.lastAction : ""), 10);
		}*/

		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	//D2Bot.store(JSON.stringify({currScript: "none", area: "out of game"}));
	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));
	var wasInGame = false;
	
	Playtime.track(false);
	
	while (true) {
		while (me.ingame) { // returns true before actually in game so we can't only use this check
			if (me.gameReady) { // returns false when switching acts so we can't use while
				if (!ingame) {
					print("Ã¿c4Updating Status");
					//D2Bot.updateStatus("Game: " + me.gamename);

					lastGameStatus = "ingame";
					ingame = true;
					Role.initRole();
					LeaderElection.hasEnteredLeaderGame = true;
					gameStart = getTickCount();

					DataFile.updateStats("runs", gameCount);
				}
				
				Playtime.recordPlaytime();

				if (!wasInGame) {
					Playtime.track(true);
					wasInGame = true;
				}

				gold = me.getStat(14) + me.getStat(15);
				
				var sequenceStr;
				if (sequence === undefined && timeline === undefined) {
					sequenceStr = "none";
				} else if (timeline === undefined) {
					sequenceStr = sequence;
				} else {
					sequenceStr = Sequencer.getTimelineName(timeline) + " " + sequence;
				}
				D2Bot.updateStatus((Role.isLeader? "Leader: " : "Follower: ") + me.gamename + timer(gameStart) + " | lvl: " + me.charlvl + " | gold: " + gold + " | " + Pather.getAreaName(me.area) + " | " + Misc.difficultyString[me.diff]+ " | " + sequenceStr + " | Playtime : " + Playtime.getInGameTime());
			}
			delay(1000);
		}

		if (wasInGame) {
			Playtime.recordPlaytime();
			Playtime.track(false);
			wasInGame = false;
		}

		hordeLocationAction();
		Playtime.recordPlaytime();
		delay(1000);
	}
}

function joinCheck (leader) {
	D2Bot.requestGame(leader);
	delay(500);

	//print(leader + " " + joinInfo.inGame + " " + lastGame.toSource() + " " + joinInfo.gameName);

	if (!joinInfo.inGame || (lastGame.length && lastGame.indexOf(joinInfo.gameName) === -1)) {
		D2Bot.printToConsole("Game is finished. Stopping join delay.");

		return true;
	}

	return false;
}

function clickJoin(location) {
	if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
		return;
	}

	if (!locationTimeout(5000, location)) { // in case join button gets bugged
		if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
			return;
		}

		if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
			return;
		}
	}
}

function followerUpdateRuns() {
	if (ingame) {
		//D2Bot.store(JSON.stringify({currScript: "none", area: "out of game"}));
		if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
			return;
		}

		print("updating runs");
		D2Bot.updateRuns();

		lastGameTick = getTickCount();
		gameCount += 1;
		lastGameStatus = "ready";
		ingame = false;
		
		if (StarterConfig.ResetCount && gameCount > StarterConfig.ResetCount) {
			gameCount = 1;

			DataFile.updateStats("runs", gameCount);
		}
	}
}

function updateQueueTime() {
	if (ingame || gameInfo.error) {
		if (!gameStart) {
			gameStart = DataFile.getStats().ingameTick;
		}
		var ReducedTime = minGameTime;
		if (!!DataFile.getStats().QueueLength) {
			var QueueInfo = JSON.parse(DataFile.getStats().QueueLength);
			var qProfile = QueueInfo.LeadProfile;
			if (me.profile == qProfile){
				var qWait = QueueInfo.QueueWait;
				if (minGameTime > qWait){ReducedTime = minGameTime - qWait}else{ReducedTime = 0}
				D2Bot.printToConsole("Prior Game Create: " + qWait + "s. minGameTime Reduced From:" + minGameTime + " To:" + ReducedTime);
			}
		}
		
		
		if (getTickCount() - gameStart < ReducedTime * 1e3) {
			ControlAction.timeoutDelay("Min game time wait", ReducedTime * 1e3 + gameStart - getTickCount());
		}
	}
}

function clickCreate(location) {
	if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
		return;
	}

	if (!locationTimeout(5000, location)) { // in case create button gets bugged
		if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
			return;
		}

		if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
			return;
		}
	}
}

function hordeLocationAction () {
	if (me.ingame) {
		return;
	}

	var i, string, control, text, location;

	location = getLocation();

MainSwitch:
	switch (location) {
	case 0:
		ControlAction.click();

		break;
	case 1:	// Lobby
		D2Bot.updateStatus("Lobby");

		me.blockKeys = false;
		loginRetry = 0;

		if (!firstLogin) {
			firstLogin = true;
		}

		if (StarterConfig.JoinChannel !== "" || (ChannelConfig[me.profile] && ChannelConfig[me.profile].JoinChannel !== "")) {
			ControlAction.click(6, 27, 480, 120, 20);

			break;
		}

		//Do leader election
		LeaderElection.leaderElection();
		
		if (Role.isLeader) {
			D2Bot.updateStatus("Leader Lobby");
			if (lastGameStatus === "pending") {
				gameCount += 1;
			}
			updateQueueTime();
			followerUpdateRuns();
			clickCreate(location);
		} else {
			D2Bot.updateStatus("Follower Lobby");
			followerUpdateRuns();
			clickJoin(location);
		}


		break;
	case 2: // Waiting In Line
		D2Bot.updateStatus("Waiting In Line...");
		
		if (Role.isLeader) {
			let linePosition = ControlAction.getText(4, 427, 234, 300, 100);
			if (linePosition) {
				linePosition = linePosition.join(" ");
				if (linePosition.indexOf(getLocaleString(11026) > -1)) { // Your position in line is:
					D2Bot.printToConsole("Queue: " + parseInt(linePosition.replace(/[^0-9]/g, "")));
					queuecount = parseInt(linePosition.replace(/[^0-9]/g, ""));
					DataFile.updateStats("QueueLength", JSON.stringify({LeadProfile: me.profile, QueueStart: queuestarttime, QueueCount :queuecount, QueueWait: 0}));
				}
			}
		}
		
		print("waiting in line start location timeout");
		var changedLocation = locationTimeout(StarterConfig.WaitInLineTimeout * 1e3, location);
		print("after location timeout, result : " + changedLocation);
		ControlAction.click(6, 433, 433, 96, 32);

		break;
	case 3: // Lobby Chat
		D2Bot.updateStatus("Lobby Chat");

		//Do leader election
		LeaderElection.leaderElection();
		
		if(Role.isLeader) {
			D2Bot.updateStatus("Leader Lobby Chat");
			updateQueueTime();
			followerUpdateRuns();
			
			if (ingame) {

				if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("AfterGameMessage")) {
					chanInfo.afterMsg = ChannelConfig[me.profile].AfterGameMessage;
				} else {
					chanInfo.afterMsg = StarterConfig.AfterGameMessage;
				}

				if (chanInfo.afterMsg) {
					if (typeof chanInfo.afterMsg === "string") {
						chanInfo.afterMsg = [chanInfo.afterMsg];
					}

					for (i = 0; i < chanInfo.afterMsg.length; i += 1) {
						sayMsg(chanInfo.afterMsg[i]);
						delay(500);
					}
				}
			}

			if (!chatActionsDone) {
				chatActionsDone = true;

				if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("JoinChannel")) {
					chanInfo.joinChannel = ChannelConfig[me.profile].JoinChannel;
				} else {
					chanInfo.joinChannel = StarterConfig.JoinChannel;
				}

				if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("FirstJoinMessage")) {
					chanInfo.firstMsg = ChannelConfig[me.profile].FirstJoinMessage;
				} else {
					chanInfo.firstMsg = StarterConfig.FirstJoinMessage;
				}

				if (chanInfo.joinChannel) {
					if (typeof chanInfo.joinChannel === "string") {
						chanInfo.joinChannel = [chanInfo.joinChannel];
					}

					if (typeof chanInfo.firstMsg === "string") {
						chanInfo.firstMsg = [chanInfo.firstMsg];
					}

					for (i = 0; i < chanInfo.joinChannel.length; i += 1) {
						ControlAction.timeoutDelay("Chat delay", StarterConfig.ChatActionsDelay * 1e3);

						if (ControlAction.joinChannel(chanInfo.joinChannel[i])) {
							useChat = true;
						} else {
							print("Ã¿c1Unable to join channel, disabling chat messages.");

							useChat = false;
						}

						if (chanInfo.firstMsg[i] !== "") {
							sayMsg(chanInfo.firstMsg[i]);
							delay(500);
						}
					}
				}
			}

			// Announce game
			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("AnnounceGames")) {
				chanInfo.announce = ChannelConfig[me.profile].AnnounceGames;
			} else {
				chanInfo.announce = StarterConfig.AnnounceGames;
			}

			if (chanInfo.announce) {
				sayMsg("Next game is " + gameInfo.gameName + gameCount + (gameInfo.gamePass === "" ? "" : "//" + gameInfo.gamePass));
			}

			clickCreate(location);
		} else {
			D2Bot.updateStatus("Follower Lobby Chat");
			followerUpdateRuns();
			
			if (!chatActionsDone) {
				chatActionsDone = true;

				ControlAction.timeoutDelay("Chat delay", StarterConfig.ChatActionsDelay * 1e3);
				say("/j " + StarterConfig.JoinChannel);
				delay(1000);

				if (StarterConfig.FirstJoinMessage !== "") {
					say(StarterConfig.FirstJoinMessage);
					delay(500);
				}
			}

			clickJoin(location);
		}

		break;
	case 4: // Create Game
		if (Role.isLeader) {
			D2Bot.updateStatus("Creating Game");

			control = getControl(1, 657, 342, 27, 20);

			// Set character difference
			if (typeof StarterConfig.CharacterDifference === "number") {
				if (control.disabled === 4) {
					ControlAction.click(6, 431, 341, 15, 16);
				}

				ControlAction.setText(1, 657, 342, 27, 20, StarterConfig.CharacterDifference.toString());
			} else if (StarterConfig.CharacterDifference === false && control.disabled === 5) {
				ControlAction.click(6, 431, 341, 15, 16);
			}

			// Get game name if there is none
			while (!gameInfo.gameName) {
				D2Bot.requestGameInfo();
				delay(500);
			}

			// FTJ handler
			if (lastGameStatus === "pending") {
				isUp = "no";

				D2Bot.printToConsole("Failed to create game");
				ControlAction.timeoutDelay("FTJ delay", StarterConfig.FTJDelay * 1e3);
				D2Bot.updateRuns();
			}


			var diff = HordeSystem.getGameDifficulty();

			ControlAction.createGame((gameInfo.gameName === "?" ? randomString(null,true) : gameInfo.gameName + gameCount), (gameInfo.gamePass === "?" ? randomString(null,true) : gameInfo.gamePass), diff, StarterConfig.CreateGameDelay * 1000);

			queuecount = 0;
			queuestarttime = new Date();
			DataFile.updateStats("QueueLength", JSON.stringify({LeadProfile: me.profile, QueueStart: queuestarttime, QueueCount :queuecount, QueueWait: 0}));

			lastGameStatus = "pending";

			setNextGame();
			locationTimeout(10000, location);
		}else{
			if (!ControlAction.click(6, 652, 469, 120, 20)) { // Join
				break;
			}
		}
		break;
	case 5: // Join Game
		if (Role.isLeader) {
			if (!ControlAction.click(6, 533, 469, 120, 20)) { // Create
				break;
			}
		} else {
			D2Bot.updateStatus("Join Game");

			JoinSettings = {};
			JoinSettings[LeaderElection.electedLeader]=["all"];
			
			if (!leader) {
				leader = [];

				for (i in JoinSettings) {
					if (JoinSettings.hasOwnProperty(i) && typeof i === "string") {
						for (j = 0; j < JoinSettings[i].length; j += 1) {
							if (JoinSettings[i][j] === me.profile || JoinSettings[i][j] === "all") {
								leader.push(i);
							}
						}
					}
				}
			}

			if (!leader || !leader.length) {
				break;
			}

		JoinLoop2:
			for (i = 0; i < 5; i += 1) {
				for (j = 0; j < leader.length; j += 1) {
					joinInfo = false;

					D2Bot.requestGame(leader[j]);
					delay(100);

					if (joinInfo && joinInfo.gameName !== "" && (lastGame.indexOf(joinInfo.gameName) === -1 || lastGameStatus === "pending")) {
						ControlAction.setText(1, 606, 148, 155, 20, joinInfo.gamePass);
						ControlAction.setText(1, 432, 148, 155, 20, joinInfo.gameName);

						if (lastGameStatus === "pending" || (gameInfo.error && DataFile.getStats().gameName === joinInfo.gameName)) {
							D2Bot.printToConsole("Failed to join game");
							ControlAction.timeoutDelay("Join Delay", StarterConfig.JoinRetryDelay * 1000, joinCheck, leader[j]);
							D2Bot.updateRuns();
							D2Bot.requestGame(leader[j]);
							delay(200);

							if (!joinInfo.inGame) {
								lastGameStatus = "ready";

								break;
							}
						}

						if (!joinInfo.inGame) {
							continue;
						}

						// Don't join immediately after previous game to avoid FTJ
						if (getTickCount() - lastGameTick < 5000) {
							ControlAction.timeoutDelay("Game Delay", (lastGameTick - getTickCount() + 5000));
						}

						print("joining game " + joinInfo.gameName);

						if (typeof AdvancedConfig[me.profile] === "object" && typeof AdvancedConfig[me.profile].JoinDelay === "number") {
							ControlAction.timeoutDelay("Custom Join Delay", AdvancedConfig[me.profile].JoinDelay * 1e3);
						} else {
							var offset = HordeSystem.getTeamIndex(me.profile);
							if (offset <= 0 ) {
								offset = HordeSystem.allTeamProfiles.length;//We're teleport char and not leader, join last
							}
							var hordeJoinDelay = offset * 6000 + rand(500, 2000);
							ControlAction.timeoutDelay("Custom Join Delay", hordeJoinDelay);
						}

						me.blockMouse = true;

						DataFile.updateStats("gameName", joinInfo.gameName);
						ControlAction.click(6, 594, 433, 172, 32);

						me.blockMouse = false;

						lastGame.push(joinInfo.gameName);

						if (lastGame.length > leader.length) { // Might need a fixed number. Right now it stores 1 game per leader.
							lastGame.shift();
						}

						lastGameStatus = "pending";

						locationTimeout(15000, location);

						break JoinLoop2;
					}
				}
			}
		}

		break;
	case 6: // Ladder
		break;
	case 7: // Channel List
		break;
	case 8: // Main Menu
	case 9: // Login
	case 12: // Character Select
	case 18: // D2 Splash
		// Single Player screen fix
		if (getLocation() === 12 && !getControl(4, 626, 100, 151, 44)) {
			ControlAction.click(6, 33, 572, 128, 35);

			break;
		}

		if (firstLogin && getLocation() === 9) { // multiple realm botting fix in case of R/D or disconnect
			ControlAction.click(6, 33, 572, 128, 35);
		}

		D2Bot.updateStatus("Logging In");

		try {
			login(me.profile);
		} catch (e) {
			if (getLocation() === 12 && loginRetry < 2) {
				if (loginRetry === 0) {
					// start from beginning of the char list
					sendKey(0x24);
				}

				control = getControl(4, 237, 457, 72, 93); // char on 1st column, 4th row

				if (control) {
					me.blockMouse = true;
					me.blockKeys = true;

					control.click();
					sendKey(0x28);
					sendKey(0x28);
					sendKey(0x28);
					sendKey(0x28);

					me.blockMouse = false;
				}

				loginRetry++;
				
				if (loginRetry == 2)
				{
					var info = {"charName" : Profile(me.profile).character};
					if (!ControlAction.findCharacter(info)) {
						if (!HordeOOG.tryCreateCharacter(me.profile))
						{
							D2Bot.restart();
						}
						break;
					}
				}
			} else {
				me.blockKeys = false;
				print(e + " " + getLocation());
			}
		}

		break;
	case 10: // Login Error
		string = "";
		text = ControlAction.getText(4, 199, 377, 402, 140);

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5207):
				D2Bot.updateStatus("Invalid Password");
				D2Bot.printToConsole("Invalid Password");

				break;
			case getLocaleString(5208):
				D2Bot.updateStatus("Invalid Account");
				D2Bot.printToConsole("Invalid Account");

				break;
			case getLocaleString(5202): // cd key intended for another product
			case getLocaleString(10915): // lod key intended for another product
				D2Bot.updateStatus("Invalid CDKey");
				D2Bot.printToConsole("Invalid CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5199):
				D2Bot.updateStatus("Disabled CDKey");
				D2Bot.printToConsole("Disabled CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(10913):
				D2Bot.updateStatus("Disabled LoD CDKey");
				D2Bot.printToConsole("Disabled LoD CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5347):
				D2Bot.updateStatus("Disconnected");
				D2Bot.printToConsole("Disconnected");
				ControlAction.click(6, 335, 412, 128, 35);

				break MainSwitch;
			default:
				D2Bot.updateStatus("Login Error");
				D2Bot.printToConsole("Login Error - " + string);

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			}
		}

		ControlAction.click(6, 335, 412, 128, 35);

		while (true) {
			delay(1000);
		}

		break;
	case 11: // Unable To Connect
		D2Bot.updateStatus("Unable To Connect");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);

			connectFail = false;
		} else {
			connectFail = true;
		}

		ControlAction.click(6, 335, 450, 128, 35);

		break;
	case 13: // Realm Down - Character Select screen
		D2Bot.updateStatus("Realm Down");
		delay(1000);

		if (!ControlAction.click(6, 33, 572, 128, 35)) {
			break;
		}

		updateCount();
		ControlAction.timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);
		D2Bot.CDKeyRD();

		if (gameInfo.switchKeys && !gameInfo.rdBlocker) {
			D2Bot.printToConsole("Realm Down - Changing CD-Key");
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			D2Bot.printToConsole("Realm Down - Restart");
			D2Bot.restart();
		}

		break;
	case 14: // Character Select - Disconnected
		D2Bot.updateStatus("Disconnected");
		delay(500);
		ControlAction.click(6, 351, 337, 96, 32);
	case 15: // Solo char creation
		HordeOOG.tryCreateCharacter(me.profile, true)
		break;
	case 16: // Character Select - Please Wait popup
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 19: // Login - Cdkey In Use
		D2Bot.printToConsole(gameInfo.mpq + " is in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
		D2Bot.CDKeyInUse();

		if (gameInfo.switchKeys) {
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			ControlAction.timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			ControlAction.click(6, 335, 450, 128, 35);
		}

		break;
	case 20: // Single Player - Select Difficulty
		break;
	case 21: // Main Menu - Connecting
		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 330, 416, 128, 35);
		}

		break;
	case 22: // Login - Invalid Cdkey (classic or xpac)
		text = ControlAction.getText(4, 162, 270, 477, 50);
		string = "";

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}
		}

		switch (string) {
		case getLocaleString(10914):
			D2Bot.printToConsole(gameInfo.mpq + " LoD key in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
			D2Bot.CDKeyInUse();

			if (gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				ControlAction.click(6, 335, 450, 128, 35);
				ControlAction.timeoutDelay("LoD key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		default:
			if (gameInfo.switchKeys) {
				D2Bot.printToConsole("Invalid CD-Key");
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				ControlAction.click(6, 335, 450, 128, 35);
				ControlAction.timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		}

		break;
	case 23: // Character Select - Connecting
		delay(me.ping*2+500);
		break;
	case 42: // Empty character screen
		string = "";
		
		delay(me.ping*2 + 500);
		
		text = ControlAction.getText(4, 45, 318, 531, 140);

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			if (string === getLocaleString(11161)) { // CDKey disabled from realm play
				D2Bot.updateStatus("Realm Disabled CDKey");
				D2Bot.printToConsole("Realm Disabled CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}
			}
		}
		
		// Can't create character, button greyed out = high likelyhood of realm down
		if (getLocation() === 42 && getControl(6, 33, 528, 168, 60).disabled === 4) {
			D2Bot.updateStatus("Realm Down");
			delay(1000);

			if (!ControlAction.click(6, 33, 572, 128, 35)) {
				break;
			}

			updateCount();
			timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);
			D2Bot.CDKeyRD();

			if (gameInfo.switchKeys) {
				D2Bot.printToConsole("Realm Down - Changing CD-Key");
				timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				D2Bot.restart();
			}
		}
		
		

		if (!locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 33, 572, 128, 35);
			
			if (HordeOOG.tryCreateCharacter(me.profile))
			{
				break;
			}
			
			if (gameInfo.rdBlocker) {
				D2Bot.restart();
			}
		}

		break;
	case 24: // Server Down - not much to do but wait..
		break;
	case 25: // Lobby - Please Wait
		if (!locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 26: // Lobby - Game Name Exists
		if (Role.isLeader) {
			ControlAction.click(6, 533, 469, 120, 20);

			gameCount += 1;
			lastGameStatus = "ready";
		}
		break;
	case 27: // Gateway Select
		ControlAction.click(6, 436, 538, 96, 32);

		break;
	case 28: // Lobby - Game Does Not Exist
		D2Bot.printToConsole("Game doesn't exist");

		if (gameInfo.rdBlocker) {
			D2Bot.printToConsole(gameInfo.mpq + " is probably flagged.", 6);

			if (gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			}
		} else {
			locationTimeout(StarterConfig.GameDoesNotExistTimeout * 1e3, location);
		}

		lastGameStatus = "ready";

		break;
	case 38: // Game is full
		if (!Role.isLeader) {
			D2Bot.printToConsole("Game is full");
			ControlAction.click(6, 652, 469, 120, 20);
			lastGame.push(joinInfo.gameName);

			lastGameStatus = "ready";
		}
		break;
	case 39: // Other Multiplayer
		ControlAction.click(6, 264, 568, 272, 35);

		break;
	case 40: // TCP/IP Game
		ControlAction.click(6, 39, 571, 128, 35);

		break;
	case 41: // TCP/IP Game - Enter Host IP
		try {
			login(me.profile);
		} catch (e) {

		}


		break;
	case 44: // Unable To Connect TCP/IP
		D2Bot.updateStatus("Unable To Connect TCP/IP");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.TCPIPNoHostDelay * 1e3);

			connectFail = false;
		} else {
			connectFail = true;
		}

		ControlAction.click(6, 351, 337, 96, 32);

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}
